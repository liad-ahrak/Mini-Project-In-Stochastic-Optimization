# -*- coding: utf-8 -*-
"""project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DPxTK8aI-KqtFohLAAuCjQ1Gz-aNbP7_
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib


def plot_points_and_sequence(file_path, longest_sequence):
    # Read data from Excel file
    df = pd.read_excel(file_path, names=['X', 'Y', 'W'])

    # Plot all points as dots
    plt.scatter(df['X'], df['Y'], label='All Points', color='blue')

    # Convert the longest_sequence to a DataFrame
    longest_sequence_df = pd.DataFrame(longest_sequence, columns=['X', 'Y'])

    # Plot the longest increasing sequence
    plt.plot(longest_sequence_df['X'], longest_sequence_df['Y'], label='Longest Sequence', color='red', marker='o')

    # Add labels and legend
    plt.xlabel('X')
    plt.ylabel('Y')
    plt.title('Points and Longest Increasing Sequence')
    plt.legend()

    # Show the plot
    plt.show()

def generate_random_excel_file(num_rows):
    # Generate random numbers for "Column 1" and "Column 2"
    random_data = {
        'X': np.random.rand(num_rows),
        'Y': np.random.rand(num_rows),
        "W": 1
    }

    # Create a DataFrame
    df = pd.DataFrame(random_data)

    # Save the DataFrame to an Excel file named "example.xlsx"
    output_file_path = "example.xlsx"
    df.to_excel(output_file_path, index=False)

def maximal_weight_increasing_subsequence(file_path):
    # Read data from Excel file
    df = pd.read_excel(file_path, names=['X', 'Y', 'W'])

    # Choose the weight column dynamically
    selected_weight_column = 'W'

    # Sort the dataframe by 'Column 1' and 'Column 2'
    df = df.sort_values(by=['X', 'Y']).reset_index(drop=True)

    # Initialize lengths, weights, and predecessors
    lengths = np.ones(len(df), dtype=int)
    weights = df[selected_weight_column].to_numpy()
    predecessors = np.full(len(df), -1)

    for i in range(1, len(df)):
        conditions = (
            pd.notna(df['X'][i]) & pd.notna(df['Y'][i]) &
            (df['X'][i] > df['X'][:i]) & (df['Y'][i] > df['Y'][:i])
        )

        if any(conditions):
            j_candidates = np.where(conditions)[0]
            weights_candidates = weights[j_candidates] + df[selected_weight_column][i]

            mask = weights_candidates > weights[i]
            update_indices = j_candidates[mask]

            if len(update_indices) > 0:
                max_length_index = update_indices[np.argmax(lengths[update_indices])]
                lengths[i] = lengths[max_length_index] + 1
                weights[i] = weights_candidates.max()
                predecessors[i] = max_length_index

    # Find the index of the maximum weight
    max_weight_index = np.argmax(weights)

    # Reconstruct the subsequence
    subsequence_indices = []
    current_index = max_weight_index

    while current_index != -1:
        subsequence_indices.insert(0, current_index)
        current_index = predecessors[current_index]

    subsequence_with_maximal_weight = df.loc[subsequence_indices, ['X', 'Y', selected_weight_column]]

    maximal_weight = weights[max_weight_index]

    return subsequence_with_maximal_weight, maximal_weight

def increase_values(path, x):
    df = pd.read_excel(path)
    df.sort_values(by=["X", "Y"], inplace=True)
    df.reset_index(drop=True, inplace=True)

    n = len(df)
    dp = [0] * n
    for i in range(n):
        dp[i] = df.loc[i, "W"]
        for j in range(i):
            if df.loc[j, "X"] < df.loc[i, "X"] and df.loc[j, "Y"] < df.loc[i, "Y"]:
                dp[i] = max(dp[i], dp[j] + df.loc[i, "W"])

    for i in range(n):
        if not any((df.loc[j, "X"] > df.loc[i, "X"]) and (df.loc[j, "Y"] > df.loc[i, "Y"]) for j in range(i+1, n)):
            df.loc[i, "W"] = x - dp[i] + 1

    df.to_excel(path, index=False)

def plot_excel_data(file_path):
    # Read the Excel file into a pandas DataFrame
    df = pd.read_excel(file_path)

    # Extract columns
    x_values = df['X']
    y_values = df['Y']
    w_values = df['W']

    # Create a scatter plot
    plt.scatter(x_values, y_values)

    # Annotate each point with the corresponding 'w' value
    for i, txt in enumerate(w_values):
        plt.annotate(txt, (x_values[i], y_values[i]))

    # Set plot labels
    plt.xlabel('X')
    plt.ylabel('Y')
    plt.title('Scatter Plot with Annotations')

    # Show the plot
    plt.show()

def main():
    #generate_random_excel_file(100)# remove this line or change the number of samples in the data set that you want
    file_path = "example.xlsx" #change the path to the file you want

    result_subsequence, maximal_weight = maximal_weight_increasing_subsequence(file_path)
    print("Subsequence with Maximal Weight:")
    print(result_subsequence)
    print("Maximal Weight:", maximal_weight)
    plot_points_and_sequence(file_path=file_path, longest_sequence=result_subsequence)

    increase_values(file_path, maximal_weight)
    result_subsequence, maximal_weight = maximal_weight_increasing_subsequence(file_path)
    print("Subsequence with Maximal Weight:")
    print(result_subsequence)
    print("Maximal Weight:", maximal_weight)
    plot_points_and_sequence(file_path=file_path, longest_sequence=result_subsequence)

    plot_excel_data(file_path)

# Press the green button in the gutter to run the script.
if __name__ == '__main__':
    main()

# See PyCharm help at https://www.jetbrains.com/help/pycharm/